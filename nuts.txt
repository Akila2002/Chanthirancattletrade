import { Component } from '@angular/core';
import { ShoppingCartService } from './shopping-cart.service';
import { ChangeDetectorRef } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'ipdept';
  cartItemsCount: number = 0;
  constructor(private shoppingCartService: ShoppingCartService,
    private cdr: ChangeDetectorRef) {
    this.updateCartItemsCount();
    // Subscribe to changes in the cart items
    this.shoppingCartService.cartItemsChanged.subscribe(() => {
      this.updateCartItemsCount();
      this.cdr.detectChanges(); // Trigger change detection
    });
  }

  updateCartItemsCount() {
    this.cartItemsCount = this.shoppingCartService.getCartItems().length;
  }



}
app.component.ts

















import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

export interface CartItem {
  item: { src: string, details: string, unitPrice: number };
  quantity: number;
  total: number;
}

@Injectable({
  providedIn: 'root'
})
export class ShoppingCartService {
  cart: any;
  findCartItem: any;
  clearCart: any;
  constructor() { }

  // private cartItems: { item: { src: string, details: string }, quantity: string }[] = [];
  cartItemsChanged = new Subject<void>();
  private cartItems: CartItem[] = [];

  getCartItems(): CartItem[] {
    return this.cartItems;
  }


  addToCart(item: { src: string, details: string, unitPrice: number }, quantity: number) {
    const existingItem = this.cartItems.find(cartItem => cartItem.item.src === item.src);

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      this.cartItems.push({
        item,
        quantity,
        total: item.unitPrice * quantity
      });
    }

    this.cartItemsChanged.next(); // Notify subscribers that the cart has changed
  }



  removeFromCart(item: CartItem) {
    const itemIndex = this.cartItems.indexOf(item);
    if (itemIndex !== -1) {
      this.cartItems.splice(itemIndex, 1);
      this.cartItemsChanged.next();
    }
  }

  getTotalAmount(): number {
    return this.cartItems.reduce((total, item) => total + item.total, 0);
  }

}
(service.ts)
















import { Component,  EventEmitter,  Input, Output  } from '@angular/core';
import { ShoppingCartService } from '../shopping-cart.service';
import { Router } from '@angular/router';


@Component({
  selector: 'app-image-modal',
  templateUrl: './image-modal.component.html',
  styleUrls: ['./image-modal.component.css']
})
export class ImageModalComponent {
constructor(private shoppingCartService: ShoppingCartService , private router:Router){}
  // selectedQuantity: string = 'L';
  
  selectedQuantity: number = 1;
  @Input() selectedImage: { src: string, details: string } | null = null;
  @Output() closeModalEvent = new EventEmitter<void>();
  @Output() addToCartEvent = new EventEmitter<{ item: { src: string, details: string }, quantity: string }>();


  closeModal() {
    this.closeModalEvent.emit();
  }
  addToCart(quantity: number) {
    if (this.selectedImage) {
      // Assuming you fetch or calculate the unit price from somewhere
      const unitPrice = this.calculateUnitPrice(this.selectedImage);
      
      // Ensure that unitPrice is a number, and then add it to the cart
      if (typeof unitPrice === 'number') {
        const { src, details } = this.selectedImage;
        this.shoppingCartService.addToCart({ src, details, unitPrice }, this.selectedQuantity);
        // close      
        // alert message
        alert('ur order is successfully')
        // this.router.navigate(['/modal']);
      } else {
        console.error('Invalid unitPrice:', unitPrice);
      }
    }
  }  
  // Example function to fetch or calculate the unit price
  calculateUnitPrice(image: { src: string, details: string }): number | null {
    // Replace this with your logic to fetch or calculate the unit price
    // Return a number if successful, or null if there's an error
    return 10; // Replace with your actual unit price logic
  }

  updateQuantity(quantity: number) {
    this.selectedQuantity = quantity;
  }

  increaseQuantity() {
    this.selectedQuantity++;
  }

  decreaseQuantity() {
    if (this.selectedQuantity > 1) {
      this.selectedQuantity--;
    }
  }
}

(image-model.ts)











<!-- navbar.component.html -->

<div>
    <!-- Your cart icon here -->
    <span>Cart <span>{{ cartItemsCount }}</span></span>
    <a routerLink="/cart">View Cart</a>
  </div>
<router-outlet></router-outlet>
<!-- <app-image-modal></app-image-modal> -->                                                                                                                                          (app.component.html)












<button type="button" class="btnn btn-primary" (click)="addToCart(1)"> ADD Card </button>                               

 (image-component.html)









<!-- cart.component.html -->
<!-- total currency -->

  <!-- <div *ngIf="totalAmount !== null">Total Amount: {{ totalAmount | currency }}</div> -->

<!--  -->
<div *ngFor="let item of cartItems">
  <img [src]="item.item.src" alt="{{ item.item.details }}">
  <p>{{ item.item.details }} - Quantity: {{ item.quantity }} - Total Price: {{ item.total | currency }}</p>

<!-- 
          <button (click)="increaseQuantity(item)">Increase Quantity</button>
          <button (click)="decreaseQuantity(item)">Decrease Quantity</button> -->
  
 
  <button (click)="removeFromCart(item)">Remove From Cart</button>



<!-- Confirm Purchase Button -->
<button type="button" class="btn btn-primary" (click)="confirmPurchase()">Confirm Purchase</button>


  <!-- <div>Total Amount: {{ totalAmount | currency }}</div> -->
</div>
(cart.component.html)











import { Component } from '@angular/core';
import { CartItem, ShoppingCartService } from '../shopping-cart.service';
import { EmailService } from '../email.service';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})
export class CartComponent {
  // cartItems: { item: { src: string, details: string }, quantity: string }[] = [];
  cartItems: CartItem[] = [];
  totalAmount: number | null = null;
constructor(private shoppingCartService: ShoppingCartService , private emailService: EmailService){}
ngOnInit() {
  this.cartItems = this.shoppingCartService.getCartItems();
  // this.updateTotalAmount();
}



removeFromCart(item: CartItem) {
  this.shoppingCartService.removeFromCart(item);
}
}                                                                                                                                                                                                                  (cart-component.ts)